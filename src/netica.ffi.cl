;; This file was automatically generated by SWIG (http://www.swig.org).
;; Version 2.0.4
;;
;; Do not make changes to this file unless you know what you are doing--modify
;; the SWIG interface file instead.

(defpackage :swig
  (:use :common-lisp :ff :excl)
  (:export #:*swig-identifier-converter* #:*swig-module-name*
           #:*void* #:*swig-export-list*))
(in-package :swig)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *swig-identifier-converter* 'identifier-convert-lispify)
  (defparameter *swig-module-name* :netica.ffi))

(defpackage :netica.ffi
  (:use :common-lisp :swig :ff :excl))


(eval-when (:compile-toplevel :load-toplevel :execute)

  ;; avoid compiling ef-templates at runtime
  (excl:find-external-format :fat)
  (excl:find-external-format :fat-le)

;;; You can define your own identifier converter if you want.
;;; Use the -identifier-converter command line argument to
;;; specify its name.

(eval-when (:compile-toplevel :load-toplevel :execute)
   (cl::defparameter *swig-export-list* nil))

(cl::defconstant *void* :..void..)

;; parsers to aid in finding SWIG definitions in files.
(cl::defun scm-p1 (form)
  (let* ((info (cl::second form))
	 (id (car info))
	 (id-args (if (eq (cl::car form) 'swig-dispatcher)
		      (cl::cdr info)
		      (cl::cddr info))))
    (cl::apply *swig-identifier-converter* id 
	   (cl::progn (cl::when (cl::eq (cl::car form) 'swig-dispatcher)
		    (cl::remf id-args :arities))
		  id-args))))

(cl::defmacro defswig1 (name (&rest args) &body body)
  `(cl::progn (cl::defmacro ,name ,args
	    ,@body)
	  (excl::define-simple-parser ,name scm-p1)) )

(cl::defmacro defswig2 (name (&rest args) &body body)
  `(cl::progn (cl::defmacro ,name ,args
	    ,@body)
	  (excl::define-simple-parser ,name second)))

(defun read-symbol-from-string (string)
  (cl::multiple-value-bind (result position)
      (cl::read-from-string string nil "eof" :preserve-whitespace t)
    (cl::if (cl::and (cl::symbolp result)
    	             (cl::eql position (cl::length string)))
        result
	(cl::multiple-value-bind (sym)
	    (cl::intern string)
	  sym))))

(cl::defun full-name (id type arity class)
  ; We need some kind of a hack here to handle template classes
  ; and other synonym types right. We need the original name.
  (let*( (sym (read-symbol-from-string 
                (if (eq *swig-identifier-converter* 'identifier-convert-lispify)
                  (string-lispify id)
                  id)))
         (sym-class (find-class sym nil))
         (id (cond ( (not sym-class)
                     id )
                   ( (and sym-class
                          (not (eq (class-name sym-class)
                                sym)))
                     (class-name sym-class) )
                   ( t
                     id ))) )
    (cl::case type
      (:getter (cl::format nil "~@[~A_~]~A" class id))
      (:constructor (cl::format nil "new_~A~@[~A~]" id arity))
      (:destructor (cl::format nil "delete_~A" id))
      (:type (cl::format nil "ff_~A" id))
      (:slot id)
      (:ff-operator (cl::format nil "ffi_~A" id))
      (otherwise (cl::format nil "~@[~A_~]~A~@[~A~]"
                         class id arity)))))
  
(cl::defun identifier-convert-null (id &key type class arity)
  (cl::if (cl::eq type :setter)
      `(cl::setf ,(identifier-convert-null
               id :type :getter :class class :arity arity))
      (read-symbol-from-string (full-name id type arity class))))

(cl::defun string-lispify (str)
  (cl::let ( (cname (excl::replace-regexp str "_" "-"))
             (lastcase :other)
             newcase char res ) 
    (cl::dotimes (n (cl::length cname))
      (cl::setf char (cl::schar cname n))
      (excl::if* (cl::alpha-char-p char)
         then
              (cl::setf newcase (cl::if (cl::upper-case-p char) :upper :lower))
              (cl::when (cl::and (cl::eq lastcase :lower)
                                 (cl::eq newcase :upper))
                ;; case change... add a dash
                (cl::push #\- res)
                (cl::setf newcase :other))
              (cl::push (cl::char-downcase char) res)
              (cl::setf lastcase newcase)
         else
              (cl::push char res)
              (cl::setf lastcase :other)))
    (cl::coerce (cl::nreverse res) 'string)))
  
(cl::defun identifier-convert-lispify (cname &key type class arity)
  (cl::assert (cl::stringp cname))
  (cl::when (cl::eq type :setter)
    (cl::return-from identifier-convert-lispify
      `(cl::setf ,(identifier-convert-lispify
               cname :type :getter :class class :arity arity))))
  (cl::setq cname (full-name cname type arity class))
  (cl::if (cl::eq type :constant)
      (cl::setf cname (cl::format nil "*~A*" cname)))
  (read-symbol-from-string (string-lispify cname)))

(cl::defun id-convert-and-export (name &rest kwargs)
  (cl::multiple-value-bind (symbol package)
      (cl::apply *swig-identifier-converter* name kwargs)
    (cl::let ((args (cl::list (cl::if (cl::consp symbol)
    	     	    	         (cl::cadr symbol) symbol)
                      (cl::or package cl::*package*))))
      (cl::apply #'cl::export args)
      (cl::pushnew args *swig-export-list*))
    symbol))

(cl::defmacro swig-insert-id (name namespace &key (type :type) class)
  `(cl::let ((cl::*package* (cl::find-package ,(package-name-for-namespace namespace))))
    (id-convert-and-export ,name :type ,type :class ,class)))

(defswig2 swig-defconstant (string value)
  (cl::let ((symbol (id-convert-and-export string :type :constant)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (cl::defconstant ,symbol ,value))))

(cl::defun maybe-reorder-args (funcname arglist)
  ;; in the foreign setter function the new value will be the last argument
  ;; in Lisp it needs to be the first
  (cl::if (cl::consp funcname)
      (cl::append (cl::last arglist) (cl::butlast arglist))
      arglist))

(cl::defun maybe-return-value (funcname arglist)
  ;; setf functions should return the new value
  (cl::when (cl::consp funcname)
    `(,(cl::if (cl::consp (cl::car arglist))
           (cl::caar arglist)
           (cl::car arglist)))))

(cl::defun swig-anyvarargs-p (arglist)
  (cl::member :SWIG__varargs_ arglist))

(defswig1 swig-defun ((name &optional (mangled-name name)
                            &key (type :operator) class arity)
                      arglist kwargs
		      &body body)
  (cl::let* ((symbol (id-convert-and-export name :type type
                          :arity arity :class class))
             (mangle (excl::if* (cl::string-equal name mangled-name)
                      then (id-convert-and-export 
				    (cl::cond
					  ((cl::eq type :setter) (cl::format nil "~A-set" name))
					  ((cl::eq type :getter) (cl::format nil "~A-get" name))
					  (t name))
				    :type :ff-operator :arity arity :class class)
                      else (cl::intern mangled-name)))
         (defun-args (maybe-reorder-args
                      symbol
		      (cl::mapcar #'cl::car (cl::and (cl::not (cl::equal arglist '(:void)))
					 (cl::loop as i in arglist
					       when (cl::eq (cl::car i) :p+)
					       collect (cl::cdr i))))))
	 (ffargs (cl::if (cl::equal arglist '(:void))
	 	      arglist
		    (cl::mapcar #'cl::cdr arglist)))
	 )
    (cl::when (swig-anyvarargs-p ffargs)
      (cl::setq ffargs '()))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (excl::compiler-let ((*record-xref-info* nil))
         (ff:def-foreign-call (,mangle ,mangled-name) ,ffargs ,@kwargs))
       (cl::macrolet ((swig-ff-call (&rest args)
                      (cl::cons ',mangle args)))
         (cl::defun ,symbol ,defun-args
           ,@body
           ,@(maybe-return-value symbol defun-args))))))

(defswig1 swig-defmethod ((name &optional (mangled-name name)
	  	                &key (type :operator) class arity)
                          ffargs kwargs
                          &body body)
  (cl::let* ((symbol (id-convert-and-export name :type type
                          :arity arity :class class))
         (mangle (cl::intern mangled-name))
         (defmethod-args (maybe-reorder-args
                          symbol
                          (cl::unless (cl::equal ffargs '(:void))
                            (cl::loop for (lisparg name dispatch) in ffargs
			    	  when (eq lisparg :p+)
                                  collect `(,name ,dispatch)))))
         (ffargs (cl::if (cl::equal ffargs '(:void))
                     ffargs
                     (cl::loop for (nil name nil . ffi) in ffargs
                           collect `(,name ,@ffi)))))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (excl::compiler-let ((*record-xref-info* nil))
         (ff:def-foreign-call (,mangle ,mangled-name) ,ffargs ,@kwargs))
       (cl::macrolet ((swig-ff-call (&rest args)
                      (cl::cons ',mangle args)))
         (cl::defmethod ,symbol ,defmethod-args
           ,@body
           ,@(maybe-return-value symbol defmethod-args))))))

(defswig1 swig-dispatcher ((name &key (type :operator) class arities))
  (cl::let ((symbol (id-convert-and-export name
                         :type type :class class)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (cl::defun ,symbol (&rest args)
         (cl::case (cl::length args)
           ,@(cl::loop for arity in arities
                   for symbol-n = (id-convert-and-export name
                                           :type type :class class :arity arity)
                   collect `(,arity (cl::apply #',symbol-n args)))
	   (t (cl::error "No applicable wrapper-methods for foreign call ~a with args ~a of classes ~a" ',symbol args (cl::mapcar #'(cl::lambda (x) (cl::class-name (cl::class-of x))) args)))
	   )))))

(defswig2 swig-def-foreign-stub (name)
  (cl::let ((lsymbol (id-convert-and-export name :type :class))
	    (symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
	(ff:def-foreign-type ,symbol (:class ))
	(cl::defclass ,lsymbol (ff:foreign-pointer) ()))))

(defswig2 swig-def-foreign-class (name supers &rest rest)
  (cl::let ((lsymbol (id-convert-and-export name :type :class))
	    (symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (ff:def-foreign-type ,symbol ,@rest)
       (cl::defclass ,lsymbol ,supers
	 ((foreign-type :initform ',symbol :initarg :foreign-type
			:accessor foreign-pointer-type))))))

(defswig2 swig-def-foreign-type (name &rest rest)
  (cl::let ((symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (ff:def-foreign-type ,symbol ,@rest))))

(defswig2 swig-def-synonym-type (synonym of ff-synonym)
  `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
     (cl::setf (cl::find-class ',synonym) (cl::find-class ',of))
     (ff:def-foreign-type ,ff-synonym (:struct ))))

(cl::defun package-name-for-namespace (namespace)
  (excl::list-to-delimited-string
   (cl::cons *swig-module-name*
         (cl::mapcar #'(cl::lambda (name)
                     (cl::string
                      (cl::funcall *swig-identifier-converter*
                               name
                               :type :namespace)))
                 namespace))
   "."))

(cl::defmacro swig-defpackage (namespace)
  (cl::let* ((parent-namespaces (cl::maplist #'cl::reverse (cl::cdr (cl::reverse namespace))))
             (parent-strings (cl::mapcar #'package-name-for-namespace
                                 parent-namespaces))
             (string (package-name-for-namespace namespace)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
      (cl::defpackage ,string
        (:use :swig :ff #+ignore '(:common-lisp :ff :excl)
              ,@parent-strings ,*swig-module-name*)
	(:import-from :cl :* :nil :t)))))

(cl::defmacro swig-in-package (namespace)
  `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
    (cl::in-package ,(package-name-for-namespace namespace))))

(defswig2 swig-defvar (name mangled-name &key type (ftype :unsigned-natural))
  (cl::let ((symbol (id-convert-and-export name :type type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
      (ff:def-foreign-variable (,symbol ,mangled-name) :type ,ftype))))

) ;; eval-when

(cl::eval-when (:compile-toplevel :execute)
  (cl::flet ((starts-with-p (str prefix)
              (cl::and (cl::>= (cl::length str) (cl::length prefix))
                (cl::string= str prefix :end1 (cl::length prefix)))))
    (cl::export (cl::loop for sym being each present-symbol of cl::*package*
                  when (cl::or (starts-with-p (cl::symbol-name sym) (cl::symbol-name :swig-))
                           (starts-with-p (cl::symbol-name sym) (cl::symbol-name :identifier-convert-)))
                  collect sym))))




(swig-def-foreign-class "longlong"
 (ff:foreign-pointer)
 (:struct (:struct (l1 :long) (l2 :long))))

(swig-def-foreign-class "ulonglong"
 (ff:foreign-pointer)
 (:struct (:struct (l1 :unsigned-long) (l2 :unsigned-long))))

(in-package :netica.ffi)
(swig-def-foreign-type "__SWIGACL_FwdReference"
  (* :void))
;; forward referenced stub.
(swig-def-foreign-class "environ_ns" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "net_bn" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "node_bn" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "stream_ns" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "nodelist_bn" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "anontype0" :int)
(swig-defconstant "NO_CHECK" 1)
(swig-defconstant "QUICK_CHECK" (+ #.(swig-insert-id "NO_CHECK" () :type :constant) 1))
(swig-defconstant "REGULAR_CHECK" (+ #.(swig-insert-id "QUICK_CHECK" () :type :constant) 1))
(swig-defconstant "COMPLETE_CHECK" (+ #.(swig-insert-id "REGULAR_CHECK" () :type :constant) 1))
(swig-defconstant "QUERY_CHECK" -1)

(swig-def-foreign-type "checking_ns"
  :int)
(swig-def-foreign-type "anontype1" :int)
(swig-defconstant "NOTHING_ERR" 1)
(swig-defconstant "REPORT_ERR" (+ #.(swig-insert-id "NOTHING_ERR" () :type :constant) 1))
(swig-defconstant "NOTICE_ERR" (+ #.(swig-insert-id "REPORT_ERR" () :type :constant) 1))
(swig-defconstant "WARNING_ERR" (+ #.(swig-insert-id "NOTICE_ERR" () :type :constant) 1))
(swig-defconstant "ERROR_ERR" (+ #.(swig-insert-id "WARNING_ERR" () :type :constant) 1))
(swig-defconstant "XXX_ERR" (+ #.(swig-insert-id "ERROR_ERR" () :type :constant) 1))

(swig-def-foreign-type "errseverity_ns"
  :int)
(swig-def-foreign-type "anontype2" :int)
(swig-defconstant "OUT_OF_MEMORY_CND" #x08)
(swig-defconstant "USER_ABORTED_CND" #x20)
(swig-defconstant "FROM_WRAPPER_CND" #x40)
(swig-defconstant "FROM_DEVELOPER_CND" #x80)
(swig-defconstant "INCONS_FINDING_CND" #x200)

(swig-def-foreign-type "errcond_ns"
  :int)
(swig-def-foreign-type "anontype3" :int)
(swig-defconstant "CREATE_EVENT" #x01)
(swig-defconstant "DUPLICATE_EVENT" #x02)
(swig-defconstant "REMOVE_EVENT" #x04)

(swig-def-foreign-type "eventtype_ns"
  :int)
(swig-def-foreign-type "anontype4" :int)
(swig-defconstant "CONTINUOUS_TYPE" 1)
(swig-defconstant "DISCRETE_TYPE" (+ #.(swig-insert-id "CONTINUOUS_TYPE" () :type :constant) 1))
(swig-defconstant "TEXT_TYPE" (+ #.(swig-insert-id "DISCRETE_TYPE" () :type :constant) 1))

(swig-def-foreign-type "nodetype_bn"
  :int)
(swig-def-foreign-type "anontype5" :int)
(swig-defconstant "NATURE_NODE" 1)
(swig-defconstant "CONSTANT_NODE" (+ #.(swig-insert-id "NATURE_NODE" () :type :constant) 1))
(swig-defconstant "DECISION_NODE" (+ #.(swig-insert-id "CONSTANT_NODE" () :type :constant) 1))
(swig-defconstant "UTILITY_NODE" (+ #.(swig-insert-id "DECISION_NODE" () :type :constant) 1))
(swig-defconstant "DISCONNECTED_NODE" (+ #.(swig-insert-id "UTILITY_NODE" () :type :constant) 1))
(swig-defconstant "ADVERSARY_NODE" (+ #.(swig-insert-id "DISCONNECTED_NODE" () :type :constant) 1))

(swig-def-foreign-type "nodekind_bn"
  :int)
(swig-def-foreign-type "anontype6" :int)
(swig-defconstant "REAL_VALUE" -25)
(swig-defconstant "STATE_VALUE" -20)
(swig-defconstant "GAUSSIAN_VALUE" -15)
(swig-defconstant "INTERVAL_VALUE" -10)
(swig-defconstant "STATE_NOT_VALUE" -7)
(swig-defconstant "LIKELIHOOD_VALUE" (+ #.(swig-insert-id "STATE_NOT_VALUE" () :type :constant) 1))
(swig-defconstant "NO_VALUE" -3)

(swig-def-foreign-type "value_type"
  :int)
(swig-def-foreign-type "anontype7" :int)
(swig-defconstant "EVERY_STATE" -5)
(swig-defconstant "IMPOSS_STATE" (+ #.(swig-insert-id "EVERY_STATE" () :type :constant) 1))
(swig-defconstant "UNDEF_STATE" (+ #.(swig-insert-id "IMPOSS_STATE" () :type :constant) 1))

(swig-def-foreign-type "state_bn_special_value"
  :int)
(swig-def-foreign-type "anontype8" :int)
(swig-defconstant "FIRST_CASE" -15)
(swig-defconstant "NEXT_CASE" (+ #.(swig-insert-id "FIRST_CASE" () :type :constant) 1))
(swig-defconstant "NO_MORE_CASES" (+ #.(swig-insert-id "NEXT_CASE" () :type :constant) 1))

(swig-def-foreign-type "caseposn_bn_special_value"
  :int)
(swig-def-foreign-type "anontype9" :int)
(swig-defconstant "ENTROPY_SENSV" #x02)
(swig-defconstant "REAL_SENSV" #x04)
(swig-defconstant "VARIANCE_SENSV" #x100)
(swig-defconstant "VARIANCE_OF_REAL_SENSV" #x104)

(swig-def-foreign-type "NewSensvToFinding_bn_special_value"
  :int)
(swig-def-foreign-type "environ_ns"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "report_ns" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "report_ns"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "stream_ns"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "randgen_ns" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "randgen_ns"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "scripter_ns" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "scripter_ns"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "net_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "node_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "nodelist_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "caseset_cs" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "caseset_cs"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "learner_bn" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "learner_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "test_bn" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "tester_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "sensv_bn" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "sensv_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "setting_bn" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "setting_bn"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "dbmgr_cs" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "dbmgr_cs"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "state_bn"
  :int)
(swig-def-foreign-type "prob_bn"
  :float)
(swig-def-foreign-type "util_bn"
  :float)
(swig-def-foreign-type "level_bn"
  :double)
(swig-def-foreign-type "color_ns"
  :int)
(swig-def-foreign-type "caseposn_bn"
  :long)
(swig-def-foreign-type "bool_ns"
  :unsigned-char)
(swig-def-foreign-type "anontype10" :int)
(swig-defconstant "DEFAULT_SAMPLING" 0)
(swig-defconstant "JOIN_TREE_SAMPLING" (+ #.(swig-insert-id "DEFAULT_SAMPLING" () :type :constant) 1))
(swig-defconstant "FORWARD_SAMPLING" (+ #.(swig-insert-id "JOIN_TREE_SAMPLING" () :type :constant) 1))

(swig-def-foreign-type "sampling_bn"
  :int)
(swig-def-foreign-type "anontype11" :int)
(swig-defconstant "FALSE" 0)
(swig-defconstant "TRUE" (+ #.(swig-insert-id "FALSE" () :type :constant) 1))

(swig-def-foreign-type "bool_value"
  :int)
(swig-def-foreign-type "anontype12" :int)
(swig-defconstant "COUNTING_LEARNING" 1)
(swig-defconstant "EM_LEARNING" 3)
(swig-defconstant "GRADIENT_DESCENT_LEARNING" (+ #.(swig-insert-id "EM_LEARNING" () :type :constant) 1))

(swig-def-foreign-type "learn_method_bn"
  :int)
(swig-def-foreign-type "anontype13" :int)
(swig-defconstant "NEGATIVE_FINDING" -7)
(swig-defconstant "LIKELIHOOD_FINDING" (+ #.(swig-insert-id "NEGATIVE_FINDING" () :type :constant) 1))
(swig-defconstant "NO_FINDING" -3)

(swig-def-foreign-type "GetNodeFinding_bn_special_value"
  :int)
(swig-def-foreign-type "anontype14" :int)
(swig-defconstant "NO_VISUAL_INFO" 0)
(swig-defconstant "NO_WINDOW" #x10)
(swig-defconstant "MINIMIZED_WINDOW" #x30)
(swig-defconstant "REGULAR_WINDOW" #x70)

(swig-def-foreign-type "ReadNet_bn_special_value"
  :int)
(swig-def-foreign-type "anontype15" :int)
(swig-defconstant "BELIEF_UPDATE" #x100)

(swig-def-foreign-type "SetNetAutoUpdate_bn_special_value"
  :int)
(swig-def-foreign-type "anontype16" :int)
(swig-defconstant "HALT_CALLBACK_RESULT" -1003)

(swig-def-foreign-type "AddNetListener_bn_special_value"
  :int)
(swig-def-foreign-type "anontype17" :int)
(swig-defconstant "ALL_THREADS" #x20)

(swig-def-foreign-type "ClearErrors_ns_special_value"
  :int)
(swig-def-foreign-type "anontype18" :int)
(swig-defconstant "LAST_ENTRY" -10)

(swig-def-foreign-type "entry_special_value"
  :int)
(swig-def-foreign-type "anontype19" :int)
(swig-defconstant "QUERY_ns" -1)

(swig-def-foreign-type "Query_ns_special_value"
  :int)

(swig-in-package ())

(swig-defun ("InitNetica2_bn" "InitNetica2_bn")
  ((:p+ PARM0_env  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p- PARM1_mesg  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
    (cl::let ((SWIG_arg1 (ff:allocate-fobject ':char :c *mesg-len-ns*)))
     (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))
     (cl::push (excl:native-to-string SWIG_arg1) ACL_result)
     (ff:free-fobject SWIG_arg1)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloseNetica_bn" "CloseNetica_bn")
  ((:p+ PARM0_env  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p- PARM1_mesg  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
    (cl::let ((SWIG_arg1 (ff:allocate-fobject ':char :c *mesg-len-ns*)))
     (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))
     (cl::push (excl:native-to-string SWIG_arg1) ACL_result)
     (ff:free-fobject SWIG_arg1)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetUserField_bn" "GetNetUserField_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_name  (* :char) )
   (:p- PARM2_length  (* :int) )
   (:p+ PARM3_kind  :int ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_name))
  (cl::let ((SWIG_arg2 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg3 PARM3_kind))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg2) ACL_result)
     (ff:free-fobject SWIG_arg2)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetNthUserField_bn" "GetNetNthUserField_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_index  :int )
   (:p+ PARM2_OUTPUT  (* (* :char)) )
   (:p+ PARM3_OUTPUT  (* (* :char)) )
   (:p- PARM4_length  (* :int) )
   (:p+ PARM5_kind  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_index))
  (cl::let ((SWIG_arg2 PARM2_OUTPUT))
  (cl::let ((SWIG_arg3 PARM3_OUTPUT))
  (cl::let ((SWIG_arg4 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg5 PARM5_kind))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg4) ACL_result)
     (ff:free-fobject SWIG_arg4)) ))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeUserField_bn" "GetNodeUserField_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_name  (* :char) )
   (:p- PARM2_length  (* :int) )
   (:p+ PARM3_kind  :int ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_name))
  (cl::let ((SWIG_arg2 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg3 PARM3_kind))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg2) ACL_result)
     (ff:free-fobject SWIG_arg2)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeNthUserField_bn" "GetNodeNthUserField_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_index  :int )
   (:p+ PARM2_OUTPUT  (* (* :char)) )
   (:p+ PARM3_OUTPUT  (* (* :char)) )
   (:p- PARM4_length  (* :int) )
   (:p+ PARM5_kind  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_index))
  (cl::let ((SWIG_arg2 PARM2_OUTPUT))
  (cl::let ((SWIG_arg3 PARM3_OUTPUT))
  (cl::let ((SWIG_arg4 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg5 PARM5_kind))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg4) ACL_result)
     (ff:free-fobject SWIG_arg4)) ))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNeticaVersion_bn" "GetNeticaVersion_bn")
  ((:p+ PARM0_env  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_OUTPUT  (* (* :char)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_OUTPUT))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetAppWindowPosition_ns" "GetAppWindowPosition_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p- PARM1_OUTPUT  (* :int) )
   (:p- PARM2_OUTPUT  (* :int) )
   (:p- PARM3_OUTPUT  (* :int) )
   (:p- PARM4_OUTPUT  (* :int) )
   (:p- PARM5_OUTPUT  (* :int) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg2 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg3 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg4 (ff:allocate-fobject ':int :c)))
     (cl::let ((SWIG_arg5 (ff:allocate-fobject ':int :c)))
     (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg5) ACL_result)
     (ff:free-fobject SWIG_arg5)) 
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg4) ACL_result)
     (ff:free-fobject SWIG_arg4)) 
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg3) ACL_result)
     (ff:free-fobject SWIG_arg3)) 
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg2) ACL_result)
     (ff:free-fobject SWIG_arg2)) 
     (cl::push (ff:fslot-value-typed (cl::quote :int) :c SWIG_arg1) ACL_result)
     (ff:free-fobject SWIG_arg1)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetStreamContents_ns" "GetStreamContents_ns")
  ((:p+ PARM0_stream  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p- PARM1_OUTPUT  (* :long) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_stream))
  (cl::let ((SWIG_arg1 (ff:allocate-fobject ':long :c)))
     (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))
     (cl::push (ff:fslot-value-typed (cl::quote :long) :c SWIG_arg1) ACL_result)
     (ff:free-fobject SWIG_arg1)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReadNetFindings2_bn" "ReadNetFindings2_bn")
  ((:p+ PARM0_case_posn  (* :long) )
   (:p+ PARM1_file  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM2_add  :unsigned-char cl:integer)
   (:p+ PARM3_nodes  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM4_INOUT  (* :long) )
   (:p+ PARM5_INOUT  (* :double) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_case_posn))
  (cl::let ((SWIG_arg1 PARM1_file))
  (cl::let ((SWIG_arg2 PARM2_add))
  (cl::let ((SWIG_arg3 PARM3_nodes))
  (cl::let ((SWIG_arg4 (ff:allocate-fobject ':long :c)))
     (cl::setf (ff:fslot-value-typed (cl::quote :long) :c SWIG_arg4) PARM4_INOUT)
     (cl::let ((SWIG_arg5 (ff:allocate-fobject ':double :c)))
     (cl::setf (ff:fslot-value-typed (cl::quote :double) :c SWIG_arg5) PARM5_INOUT)
     (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)
     (cl::push (ff:fslot-value-typed (cl::quote :double) :c SWIG_arg5) ACL_result)
     (ff:free-fobject SWIG_arg5)) 
     (cl::push (ff:fslot-value-typed (cl::quote :long) :c SWIG_arg4) ACL_result)
     (ff:free-fobject SWIG_arg4)) ))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HasNodeTable_bn" "HasNodeTable_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_OUTPUT  (* :unsigned-char) ))
  (:returning (:unsigned-char cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_OUTPUT))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeVisPosition_bn" "GetNodeVisPosition_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_vis  (* :void) )
   (:p- PARM2_OUTPUT  (* :double) )
   (:p- PARM3_OUTPUT  (* :double) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_vis))
  (cl::let ((SWIG_arg2 (ff:allocate-fobject ':double :c)))
     (cl::let ((SWIG_arg3 (ff:allocate-fobject ':double :c)))
     (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)
     (cl::push (ff:fslot-value-typed (cl::quote :double) :c SWIG_arg3) ACL_result)
     (ff:free-fobject SWIG_arg3)) 
     (cl::push (ff:fslot-value-typed (cl::quote :double) :c SWIG_arg2) ACL_result)
     (ff:free-fobject SWIG_arg2)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetUndefDbl_ns" "GetUndefDbl_ns")
  (:void)
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetInfinityDbl_ns" "GetInfinityDbl_ns")
  (:void)
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defconstant "NULL" 0)
(swig-defconstant "MESG_LEN_ns" 600)
(swig-defconstant "NAME_MAX_ns" 30)
(swig-defun ("NewNeticaEnviron_ns" "NewNeticaEnviron_ns")
  ((:p+ PARM0_license  (* :char) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM2_locn  (* :char) ))
  (:returning ((* #.(swig-insert-id "environ_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_license))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::let ((SWIG_arg2 PARM2_locn))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ArgumentChecking_ns" "ArgumentChecking_ns")
  ((:p+ PARM0_setting  #.(swig-insert-id "checking_ns" () :type :type) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning (#.(swig-insert-id "checking_ns" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_setting))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetPassword_ns" "SetPassword_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_password  (* :char) )
   (:p+ PARM2_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_password))
  (cl::let ((SWIG_arg2 PARM2_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetLanguage_ns" "SetLanguage_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_language  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_language))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LimitMemoryUsage_ns" "LimitMemoryUsage_ns")
  ((:p+ PARM0_max_mem  :double )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_max_mem))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetEnvironUserData_ns" "SetEnvironUserData_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_kind  :int )
   (:p+ PARM2_data  (* :void) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (cl::let ((SWIG_arg2 PARM2_data))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetEnvironUserData_ns" "GetEnvironUserData_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_kind  :int ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetError_ns" "GetError_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_severity  #.(swig-insert-id "errseverity_ns" () :type :type) )
   (:p+ PARM2_after  (* #.(swig-insert-id "report_ns" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "report_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_severity))
  (cl::let ((SWIG_arg2 PARM2_after))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ErrorNumber_ns" "ErrorNumber_ns")
  ((:p+ PARM0_error  (* #.(swig-insert-id "report_ns" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_error))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ErrorMessage_ns" "ErrorMessage_ns")
  ((:p+ PARM0_error  (* #.(swig-insert-id "report_ns" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_error))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ErrorSeverity_ns" "ErrorSeverity_ns")
  ((:p+ PARM0_error  (* #.(swig-insert-id "report_ns" () :type :type)) ))
  (:returning (#.(swig-insert-id "errseverity_ns" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_error))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ErrorCategory_ns" "ErrorCategory_ns")
  ((:p+ PARM0_cond  #.(swig-insert-id "errcond_ns" () :type :type) )
   (:p+ PARM1_error  (* #.(swig-insert-id "report_ns" () :type :type)) ))
  (:returning (#.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cond))
  (cl::let ((SWIG_arg1 PARM1_error))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearError_ns" "ClearError_ns")
  ((:p+ PARM0_error  (* #.(swig-insert-id "report_ns" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_error))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearErrors_ns" "ClearErrors_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_severity  #.(swig-insert-id "errseverity_ns" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_severity))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewError_ns" "NewError_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_number  :int )
   (:p+ PARM2_severity  #.(swig-insert-id "errseverity_ns" () :type :type) )
   (:p+ PARM3_mesg  (* :char) ))
  (:returning ((* #.(swig-insert-id "report_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_number))
  (cl::let ((SWIG_arg2 PARM2_severity))
  (cl::let ((SWIG_arg3 PARM3_mesg))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TestFaultRecovery_ns" "TestFaultRecovery_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_test_num  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_test_num))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UserAllowed_ns" "UserAllowed_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_setting  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_setting))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetAppWindowPosition_ns" "SetAppWindowPosition_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_left  :int )
   (:p+ PARM2_top  :int )
   (:p+ PARM3_width  :int )
   (:p+ PARM4_height  :int )
   (:p+ PARM5_status  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_left))
  (cl::let ((SWIG_arg2 PARM2_top))
  (cl::let ((SWIG_arg3 PARM3_width))
  (cl::let ((SWIG_arg4 PARM4_height))
  (cl::let ((SWIG_arg5 PARM5_status))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PrintToMessagesWindow_ns" "PrintToMessagesWindow_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_mesg  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_mesg))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewFileStream_ns" "NewFileStream_ns")
  ((:p+ PARM0_filename  (* :char) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM2_access  (* :char) ))
  (:returning ((* #.(swig-insert-id "stream_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_filename))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::let ((SWIG_arg2 PARM2_access))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewMemoryStream_ns" "NewMemoryStream_ns")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM2_access  (* :char) ))
  (:returning ((* #.(swig-insert-id "stream_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::let ((SWIG_arg2 PARM2_access))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteStream_ns" "DeleteStream_ns")
  ((:p+ PARM0_file  (* #.(swig-insert-id "stream_ns" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_file))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetStreamPassword_ns" "SetStreamPassword_ns")
  ((:p+ PARM0_stream  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM1_password  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_stream))
  (cl::let ((SWIG_arg1 PARM1_password))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetStreamContents_ns" "SetStreamContents_ns")
  ((:p+ PARM0_stream  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM1_buffer  (* :char) )
   (:p+ PARM2_length  :long )
   (:p+ PARM3_copy  #.(swig-insert-id "bool_ns" () :type :type) cl:integer))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_stream))
  (cl::let ((SWIG_arg1 PARM1_buffer))
  (cl::let ((SWIG_arg2 PARM2_length))
  (cl::let ((SWIG_arg3 PARM3_copy))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WriteNet_bn" "WriteNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_file  (* #.(swig-insert-id "stream_ns" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_file))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReadNet_bn" "ReadNet_bn")
  ((:p+ PARM0_file  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM1_options  :int ))
  (:returning ((* #.(swig-insert-id "net_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_file))
  (cl::let ((SWIG_arg1 PARM1_options))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WriteNetFindings_bn" "WriteNetFindings_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_file  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM2_ID_num  :long )
   (:p+ PARM3_freq  :double ))
  (:returning (#.(swig-insert-id "caseposn_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_file))
  (cl::let ((SWIG_arg2 PARM2_ID_num))
  (cl::let ((SWIG_arg3 PARM3_freq))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetCaseFileDelimChar_ns" "SetCaseFileDelimChar_ns")
  ((:p+ PARM0_newchar  :int )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_newchar))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetMissingDataChar_ns" "SetMissingDataChar_ns")
  ((:p+ PARM0_newchar  :int )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_newchar))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewNet_bn" "NewNet_bn")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "net_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_env))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CopyNet_bn" "CopyNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_new_name  (* :char) )
   (:p+ PARM2_new_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM3_options  (* :char) ))
  (:returning ((* #.(swig-insert-id "net_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_new_name))
  (cl::let ((SWIG_arg2 PARM2_new_env))
  (cl::let ((SWIG_arg3 PARM3_options))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNet_bn" "DeleteNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNthNet_bn" "GetNthNet_bn")
  ((:p+ PARM0_nth  :int )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "net_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nth))
  (cl::let ((SWIG_arg1 PARM1_env))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewNode_bn" "NewNode_bn")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_num_states  :int )
   (:p+ PARM2_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "node_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_num_states))
  (cl::let ((SWIG_arg2 PARM2_net))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CopyNodes_bn" "CopyNodes_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_new_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM2_options  (* :char) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_new_net))
  (cl::let ((SWIG_arg2 PARM2_options))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNode_bn" "DeleteNode_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetName_bn" "SetNetName_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_name  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_name))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetTitle_bn" "SetNetTitle_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_title  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_title))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetComment_bn" "SetNetComment_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_comment  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_comment))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetElimOrder_bn" "SetNetElimOrder_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_elim_order  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_elim_order))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetAutoUpdate_bn" "SetNetAutoUpdate_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_auto_update  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_auto_update))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetUserField_bn" "SetNetUserField_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_name  (* :char) )
   (:p+ PARM2_data  (* :void) )
   (:p+ PARM3_length  :int )
   (:p+ PARM4_kind  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_name))
  (cl::let ((SWIG_arg2 PARM2_data))
  (cl::let ((SWIG_arg3 PARM3_length))
  (cl::let ((SWIG_arg4 PARM4_kind))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetUserData_bn" "SetNetUserData_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_kind  :int )
   (:p+ PARM2_data  (* :void) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (cl::let ((SWIG_arg2 PARM2_data))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNetListener_bn" "AddNetListener_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_callback  (* (:function ((* #.(swig-insert-id "net_bn" () :type :type)) #.(swig-insert-id "eventtype_ns" () :type :type) (* :void) (* :void) ) :int)) )
   (:p+ PARM2_object  (* :void) )
   (:p+ PARM3_filter  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_callback))
  (cl::let ((SWIG_arg2 PARM2_object))
  (cl::let ((SWIG_arg3 PARM3_filter))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeName_bn" "SetNodeName_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_name  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_name))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeTitle_bn" "SetNodeTitle_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_title  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_title))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeComment_bn" "SetNodeComment_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_comment  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_comment))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeLevels_bn" "SetNodeLevels_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_num_states  :int )
   (:p+ PARM2_levels  (* #.(swig-insert-id "level_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_num_states))
  (cl::let ((SWIG_arg2 PARM2_levels))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeKind_bn" "SetNodeKind_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_kind  #.(swig-insert-id "nodekind_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeStateName_bn" "SetNodeStateName_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) )
   (:p+ PARM2_state_name  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::let ((SWIG_arg2 PARM2_state_name))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeStateNames_bn" "SetNodeStateNames_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state_names  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state_names))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeStateTitle_bn" "SetNodeStateTitle_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) )
   (:p+ PARM2_state_title  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::let ((SWIG_arg2 PARM2_state_title))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeStateComment_bn" "SetNodeStateComment_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) )
   (:p+ PARM2_state_comment  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::let ((SWIG_arg2 PARM2_state_comment))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeInputName_bn" "SetNodeInputName_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_link_index  :int )
   (:p+ PARM2_link_name  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_link_index))
  (cl::let ((SWIG_arg2 PARM2_link_name))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeEquation_bn" "SetNodeEquation_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_eqn  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_eqn))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeFuncState_bn" "SetNodeFuncState_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM2_st  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::let ((SWIG_arg2 PARM2_st))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeFuncReal_bn" "SetNodeFuncReal_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM2_val  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::let ((SWIG_arg2 PARM2_val))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeProbs_bn" "SetNodeProbs_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM2_probs  (* #.(swig-insert-id "prob_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::let ((SWIG_arg2 PARM2_probs))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeExperience_bn" "SetNodeExperience_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM2_experience  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::let ((SWIG_arg2 PARM2_experience))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNodeTables_bn" "DeleteNodeTables_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeUserField_bn" "SetNodeUserField_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_name  (* :char) )
   (:p+ PARM2_data  (* :void) )
   (:p+ PARM3_length  :int )
   (:p+ PARM4_kind  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_name))
  (cl::let ((SWIG_arg2 PARM2_data))
  (cl::let ((SWIG_arg3 PARM3_length))
  (cl::let ((SWIG_arg4 PARM4_kind))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeUserData_bn" "SetNodeUserData_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_kind  :int )
   (:p+ PARM2_data  (* :void) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (cl::let ((SWIG_arg2 PARM2_data))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNodeListener_bn" "AddNodeListener_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_callback  (* (:function ((* #.(swig-insert-id "node_bn" () :type :type)) #.(swig-insert-id "eventtype_ns" () :type :type) (* :void) (* :void) ) :int)) )
   (:p+ PARM2_object  (* :void) )
   (:p+ PARM3_filter  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_callback))
  (cl::let ((SWIG_arg2 PARM2_object))
  (cl::let ((SWIG_arg3 PARM3_filter))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeVisPosition_bn" "SetNodeVisPosition_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_vis  (* :void) )
   (:p+ PARM2_x  :double )
   (:p+ PARM3_y  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_vis))
  (cl::let ((SWIG_arg2 PARM2_x))
  (cl::let ((SWIG_arg3 PARM3_y))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeVisStyle_bn" "SetNodeVisStyle_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_vis  (* :void) )
   (:p+ PARM2_style  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_vis))
  (cl::let ((SWIG_arg2 PARM2_style))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetName_bn" "GetNetName_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetTitle_bn" "GetNetTitle_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetComment_bn" "GetNetComment_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetNodes2_bn" "GetNetNodes2_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_options  (* :char) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_options))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeNamed_bn" "GetNodeNamed_bn")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "node_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_net))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetFileName_bn" "GetNetFileName_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetAutoUpdate_bn" "GetNetAutoUpdate_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetElimOrder_bn" "GetNetElimOrder_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetUserData_bn" "GetNetUserData_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_kind  :int ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeNet_bn" "GetNodeNet_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "net_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeName_bn" "GetNodeName_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeTitle_bn" "GetNodeTitle_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeComment_bn" "GetNodeComment_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeType_bn" "GetNodeType_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "nodetype_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeKind_bn" "GetNodeKind_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "nodekind_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeNumberStates_bn" "GetNodeNumberStates_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeLevels_bn" "GetNodeLevels_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "level_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeStateName_bn" "GetNodeStateName_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeStateTitle_bn" "GetNodeStateTitle_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeStateComment_bn" "GetNodeStateComment_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetStateNamed_bn" "GetStateNamed_bn")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "state_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeParents_bn" "GetNodeParents_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeChildren_bn" "GetNodeChildren_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeInputName_bn" "GetNodeInputName_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_link_index  :int ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_link_index))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetInputNamed_bn" "GetInputNamed_bn")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeEquation_bn" "GetNodeEquation_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeFuncState_bn" "GetNodeFuncState_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "state_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeFuncReal_bn" "GetNodeFuncReal_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeProbs_bn" "GetNodeProbs_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "prob_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeExperience_bn" "GetNodeExperience_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_parent_states  (* #.(swig-insert-id "state_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_parent_states))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsNodeDeterministic_bn" "IsNodeDeterministic_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeUserData_bn" "GetNodeUserData_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_kind  :int ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_kind))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeVisStyle_bn" "GetNodeVisStyle_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_vis  (* :void) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_vis))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddLink_bn" "AddLink_bn")
  ((:p+ PARM0_parent  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_child  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_parent))
  (cl::let ((SWIG_arg1 PARM1_child))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteLink_bn" "DeleteLink_bn")
  ((:p+ PARM0_link_index  :int )
   (:p+ PARM1_child  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_link_index))
  (cl::let ((SWIG_arg1 PARM1_child))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SwitchNodeParent_bn" "SwitchNodeParent_bn")
  ((:p+ PARM0_link_index  :int )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM2_new_parent  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_link_index))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::let ((SWIG_arg2 PARM2_new_parent))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsNodeRelated_bn" "IsNodeRelated_bn")
  ((:p+ PARM0_related_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_relation  (* :char) )
   (:p+ PARM2_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_related_node))
  (cl::let ((SWIG_arg1 PARM1_relation))
  (cl::let ((SWIG_arg2 PARM2_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetRelatedNodes_bn" "GetRelatedNodes_bn")
  ((:p+ PARM0_related_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_relation  (* :char) )
   (:p+ PARM2_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_related_nodes))
  (cl::let ((SWIG_arg1 PARM1_relation))
  (cl::let ((SWIG_arg2 PARM2_node))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetRelatedNodesMult_bn" "GetRelatedNodesMult_bn")
  ((:p+ PARM0_related_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_relation  (* :char) )
   (:p+ PARM2_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_related_nodes))
  (cl::let ((SWIG_arg1 PARM1_relation))
  (cl::let ((SWIG_arg2 PARM2_nodes))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewNodeList2_bn" "NewNodeList2_bn")
  ((:p+ PARM0_length  :int )
   (:p+ PARM1_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_length))
  (cl::let ((SWIG_arg1 PARM1_net))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNodeList_bn" "DeleteNodeList_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearNodeList_bn" "ClearNodeList_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LengthNodeList_bn" "LengthNodeList_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNodeToList_bn" "AddNodeToList_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_index  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_nodes))
  (cl::let ((SWIG_arg2 PARM2_index))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveNthNode_bn" "RemoveNthNode_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_index  :int ))
  (:returning ((* #.(swig-insert-id "node_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_index))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NthNode_bn" "NthNode_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_index  :int ))
  (:returning ((* #.(swig-insert-id "node_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_index))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNthNode_bn" "SetNthNode_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_index  :int )
   (:p+ PARM2_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_index))
  (cl::let ((SWIG_arg2 PARM2_node))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IndexOfNodeInList_bn" "IndexOfNodeInList_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_start_index  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_nodes))
  (cl::let ((SWIG_arg2 PARM2_start_index))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DupNodeList_bn" "DupNodeList_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MapStateList_bn" "MapStateList_bn")
  ((:p+ PARM0_src_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM1_src_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_dest_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM3_dest_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_src_states))
  (cl::let ((SWIG_arg1 PARM1_src_nodes))
  (cl::let ((SWIG_arg2 PARM2_dest_states))
  (cl::let ((SWIG_arg3 PARM3_dest_nodes))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReviseCPTsByFindings_bn" "ReviseCPTsByFindings_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_updating  :int )
   (:p+ PARM2_degree  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_updating))
  (cl::let ((SWIG_arg2 PARM2_degree))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReviseCPTsByCaseFile_bn" "ReviseCPTsByCaseFile_bn")
  ((:p+ PARM0_file  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM1_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_updating  :int )
   (:p+ PARM3_degree  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_file))
  (cl::let ((SWIG_arg1 PARM1_nodes))
  (cl::let ((SWIG_arg2 PARM2_updating))
  (cl::let ((SWIG_arg3 PARM3_degree))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FadeCPTable_bn" "FadeCPTable_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_degree  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_degree))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNodeStates_bn" "AddNodeStates_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_first_state  #.(swig-insert-id "state_bn" () :type :type) )
   (:p+ PARM2_state_names  (* :char) )
   (:p+ PARM3_num_states  :int )
   (:p+ PARM4_cpt_fill  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_first_state))
  (cl::let ((SWIG_arg2 PARM2_state_names))
  (cl::let ((SWIG_arg3 PARM3_num_states))
  (cl::let ((SWIG_arg4 PARM4_cpt_fill))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveNodeState_bn" "RemoveNodeState_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReorderNodeStates_bn" "ReorderNodeStates_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_new_order  (* #.(swig-insert-id "state_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_new_order))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EquationToTable_bn" "EquationToTable_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_num_samples  :int )
   (:p+ PARM2_samp_unc  #.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   (:p+ PARM3_add_exist  #.(swig-insert-id "bool_ns" () :type :type) cl:integer))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_num_samples))
  (cl::let ((SWIG_arg2 PARM2_samp_unc))
  (cl::let ((SWIG_arg3 PARM3_add_exist))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReverseLink_bn" "ReverseLink_bn")
  ((:p+ PARM0_parent  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_child  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_parent))
  (cl::let ((SWIG_arg1 PARM1_child))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AbsorbNodes_bn" "AbsorbNodes_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterFinding_bn" "EnterFinding_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterFindingNot_bn" "EnterFindingNot_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterNodeValue_bn" "EnterNodeValue_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_value  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_value))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterNodeLikelihood_bn" "EnterNodeLikelihood_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_likelihood  (* #.(swig-insert-id "prob_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_likelihood))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterNodeCalibration_bn" "EnterNodeCalibration_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_calibration  (* #.(swig-insert-id "prob_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_calibration))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterIntervalFinding_bn" "EnterIntervalFinding_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_low  :double )
   (:p+ PARM2_high  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_low))
  (cl::let ((SWIG_arg2 PARM2_high))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterGaussianFinding_bn" "EnterGaussianFinding_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_mean  :double )
   (:p+ PARM2_std_dev  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_mean))
  (cl::let ((SWIG_arg2 PARM2_std_dev))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeFinding_bn" "GetNodeFinding_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "state_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeValueEntered_bn" "GetNodeValueEntered_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeLikelihood_bn" "GetNodeLikelihood_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "prob_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RetractNodeFindings_bn" "RetractNodeFindings_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RetractNetFindings_bn" "RetractNetFindings_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CalcNodeState_bn" "CalcNodeState_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "state_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CalcNodeValue_bn" "CalcNodeValue_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompileNet_bn" "CompileNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UncompileNet_bn" "UncompileNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SizeCompiledNet_bn" "SizeCompiledNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_method  :int ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_method))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsBeliefUpdated_bn" "IsBeliefUpdated_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeBeliefs_bn" "GetNodeBeliefs_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "prob_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeExpectedValue_bn" "GetNodeExpectedValue_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_std_dev  (* :double) )
   (:p+ PARM2_x3  (* :double) )
   (:p+ PARM3_x4  (* :double) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_std_dev))
  (cl::let ((SWIG_arg2 PARM2_x3))
  (cl::let ((SWIG_arg3 PARM3_x4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeExpectedUtils_bn" "GetNodeExpectedUtils_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "util_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FindingsProbability_bn" "FindingsProbability_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNetExpectedUtility_bn" "GetNetExpectedUtility_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "util_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("JointProbability_bn" "JointProbability_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_states  (* #.(swig-insert-id "state_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_states))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MostProbableConfig_bn" "MostProbableConfig_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_config  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM2_nth  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_config))
  (cl::let ((SWIG_arg2 PARM2_nth))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewSensvToFinding_bn" "NewSensvToFinding_bn")
  ((:p+ PARM0_t_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_v_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_what_calc  :int ))
  (:returning ((* #.(swig-insert-id "sensv_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_t_node))
  (cl::let ((SWIG_arg1 PARM1_v_nodes))
  (cl::let ((SWIG_arg2 PARM2_what_calc))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteSensvToFinding_bn" "DeleteSensvToFinding_bn")
  ((:p+ PARM0_s  (* #.(swig-insert-id "sensv_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_s))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMutualInfo_bn" "GetMutualInfo_bn")
  ((:p+ PARM0_s  (* #.(swig-insert-id "sensv_bn" () :type :type)) )
   (:p+ PARM1_v_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_s))
  (cl::let ((SWIG_arg1 PARM1_v_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetVarianceOfReal_bn" "GetVarianceOfReal_bn")
  ((:p+ PARM0_s  (* #.(swig-insert-id "sensv_bn" () :type :type)) )
   (:p+ PARM1_v_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_s))
  (cl::let ((SWIG_arg1 PARM1_v_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GenerateRandomCase_bn" "GenerateRandomCase_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_method  #.(swig-insert-id "sampling_bn" () :type :type) )
   (:p+ PARM2_num  :double )
   (:p+ PARM3_rand  (* #.(swig-insert-id "randgen_ns" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_method))
  (cl::let ((SWIG_arg2 PARM2_num))
  (cl::let ((SWIG_arg3 PARM3_rand))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNodeToNodeset_bn" "AddNodeToNodeset_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_nodeset  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_nodeset))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveNodeFromNodeset_bn" "RemoveNodeFromNodeset_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_nodeset  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_nodeset))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsNodeInNodeset_bn" "IsNodeInNodeset_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_nodeset  (* :char) ))
  (:returning (#.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_nodeset))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetAllNodesets_bn" "GetAllNodesets_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_include_system  #.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   (:p+ PARM2_vis  (* :void) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_include_system))
  (cl::let ((SWIG_arg2 PARM2_vis))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodesetColor_bn" "SetNodesetColor_bn")
  ((:p+ PARM0_nodeset  (* :char) )
   (:p+ PARM1_color  #.(swig-insert-id "color_ns" () :type :type) )
   (:p+ PARM2_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM3_vis  (* :void) ))
  (:returning (#.(swig-insert-id "color_ns" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodeset))
  (cl::let ((SWIG_arg1 PARM1_color))
  (cl::let ((SWIG_arg2 PARM2_net))
  (cl::let ((SWIG_arg3 PARM3_vis))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReorderNodesets_bn" "ReorderNodesets_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_nodeset_order  (* :char) )
   (:p+ PARM2_vis  (* :void) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_nodeset_order))
  (cl::let ((SWIG_arg2 PARM2_vis))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewCaseset_cs" "NewCaseset_cs")
  ((:p+ PARM0_name  (* :char) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "caseset_cs" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::let ((SWIG_arg1 PARM1_env))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteCaseset_cs" "DeleteCaseset_cs")
  ((:p+ PARM0_cases  (* #.(swig-insert-id "caseset_cs" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cases))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddFileToCaseset_cs" "AddFileToCaseset_cs")
  ((:p+ PARM0_cases  (* #.(swig-insert-id "caseset_cs" () :type :type)) )
   (:p+ PARM1_file  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM2_degree  :double )
   (:p+ PARM3_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cases))
  (cl::let ((SWIG_arg1 PARM1_file))
  (cl::let ((SWIG_arg2 PARM2_degree))
  (cl::let ((SWIG_arg3 PARM3_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WriteCaseset_cs" "WriteCaseset_cs")
  ((:p+ PARM0_cases  (* #.(swig-insert-id "caseset_cs" () :type :type)) )
   (:p+ PARM1_file  (* #.(swig-insert-id "stream_ns" () :type :type)) )
   (:p+ PARM2_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cases))
  (cl::let ((SWIG_arg1 PARM1_file))
  (cl::let ((SWIG_arg2 PARM2_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewDBManager_cs" "NewDBManager_cs")
  ((:p+ PARM0_connect_str  (* :char) )
   (:p+ PARM1_options  (* :char) )
   (:p+ PARM2_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "dbmgr_cs" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_connect_str))
  (cl::let ((SWIG_arg1 PARM1_options))
  (cl::let ((SWIG_arg2 PARM2_env))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteDBManager_cs" "DeleteDBManager_cs")
  ((:p+ PARM0_dbmgr  (* #.(swig-insert-id "dbmgr_cs" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_dbmgr))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExecuteDBSql_cs" "ExecuteDBSql_cs")
  ((:p+ PARM0_dbmgr  (* #.(swig-insert-id "dbmgr_cs" () :type :type)) )
   (:p+ PARM1_sql_cmnd  (* :char) )
   (:p+ PARM2_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_dbmgr))
  (cl::let ((SWIG_arg1 PARM1_sql_cmnd))
  (cl::let ((SWIG_arg2 PARM2_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InsertFindingsIntoDB_bn" "InsertFindingsIntoDB_bn")
  ((:p+ PARM0_dbmgr  (* #.(swig-insert-id "dbmgr_cs" () :type :type)) )
   (:p+ PARM1_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_column_names  (* :char) )
   (:p+ PARM3_tables  (* :char) )
   (:p+ PARM4_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_dbmgr))
  (cl::let ((SWIG_arg1 PARM1_nodes))
  (cl::let ((SWIG_arg2 PARM2_column_names))
  (cl::let ((SWIG_arg3 PARM3_tables))
  (cl::let ((SWIG_arg4 PARM4_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddDBCasesToCaseset_cs" "AddDBCasesToCaseset_cs")
  ((:p+ PARM0_cases  (* #.(swig-insert-id "caseset_cs" () :type :type)) )
   (:p+ PARM1_dbmgr  (* #.(swig-insert-id "dbmgr_cs" () :type :type)) )
   (:p+ PARM2_degree  :double )
   (:p+ PARM3_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM4_column_names  (* :char) )
   (:p+ PARM5_tables  (* :char) )
   (:p+ PARM6_condition  (* :char) )
   (:p+ PARM7_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cases))
  (cl::let ((SWIG_arg1 PARM1_dbmgr))
  (cl::let ((SWIG_arg2 PARM2_degree))
  (cl::let ((SWIG_arg3 PARM3_nodes))
  (cl::let ((SWIG_arg4 PARM4_column_names))
  (cl::let ((SWIG_arg5 PARM5_tables))
  (cl::let ((SWIG_arg6 PARM6_condition))
  (cl::let ((SWIG_arg7 PARM7_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7)))))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNodesFromDB_bn" "AddNodesFromDB_bn")
  ((:p+ PARM0_dbmgr  (* #.(swig-insert-id "dbmgr_cs" () :type :type)) )
   (:p+ PARM1_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM2_column_names  (* :char) )
   (:p+ PARM3_tables  (* :char) )
   (:p+ PARM4_condition  (* :char) )
   (:p+ PARM5_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_dbmgr))
  (cl::let ((SWIG_arg1 PARM1_net))
  (cl::let ((SWIG_arg2 PARM2_column_names))
  (cl::let ((SWIG_arg3 PARM3_tables))
  (cl::let ((SWIG_arg4 PARM4_condition))
  (cl::let ((SWIG_arg5 PARM5_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewLearner_bn" "NewLearner_bn")
  ((:p+ PARM0_method  #.(swig-insert-id "learn_method_bn" () :type :type) )
   (:p+ PARM1_options  (* :char) )
   (:p+ PARM2_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "learner_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_method))
  (cl::let ((SWIG_arg1 PARM1_options))
  (cl::let ((SWIG_arg2 PARM2_env))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteLearner_bn" "DeleteLearner_bn")
  ((:p+ PARM0_algo  (* #.(swig-insert-id "learner_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_algo))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetLearnerMaxIters_bn" "SetLearnerMaxIters_bn")
  ((:p+ PARM0_algo  (* #.(swig-insert-id "learner_bn" () :type :type)) )
   (:p+ PARM1_max_iters  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_algo))
  (cl::let ((SWIG_arg1 PARM1_max_iters))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetLearnerMaxTol_bn" "SetLearnerMaxTol_bn")
  ((:p+ PARM0_algo  (* #.(swig-insert-id "learner_bn" () :type :type)) )
   (:p+ PARM1_log_likeli_tol  :double ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_algo))
  (cl::let ((SWIG_arg1 PARM1_log_likeli_tol))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LearnCPTs_bn" "LearnCPTs_bn")
  ((:p+ PARM0_algo  (* #.(swig-insert-id "learner_bn" () :type :type)) )
   (:p+ PARM1_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_cases  (* #.(swig-insert-id "caseset_cs" () :type :type)) )
   (:p+ PARM3_degree  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_algo))
  (cl::let ((SWIG_arg1 PARM1_nodes))
  (cl::let ((SWIG_arg2 PARM2_cases))
  (cl::let ((SWIG_arg3 PARM3_degree))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewNetTester_bn" "NewNetTester_bn")
  ((:p+ PARM0_test_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_unobsv_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_tests  :int ))
  (:returning ((* #.(swig-insert-id "tester_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test_nodes))
  (cl::let ((SWIG_arg1 PARM1_unobsv_nodes))
  (cl::let ((SWIG_arg2 PARM2_tests))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNetTester_bn" "DeleteNetTester_bn")
  ((:p+ PARM0_test  (* #.(swig-insert-id "tester_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TestWithCaseset_bn" "TestWithCaseset_bn")
  ((:p+ PARM0_test  (* #.(swig-insert-id "tester_bn" () :type :type)) )
   (:p+ PARM1_cases  (* #.(swig-insert-id "caseset_cs" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test))
  (cl::let ((SWIG_arg1 PARM1_cases))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTestErrorRate_bn" "GetTestErrorRate_bn")
  ((:p+ PARM0_test  (* #.(swig-insert-id "tester_bn" () :type :type)) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTestLogLoss_bn" "GetTestLogLoss_bn")
  ((:p+ PARM0_test  (* #.(swig-insert-id "tester_bn" () :type :type)) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTestQuadraticLoss_bn" "GetTestQuadraticLoss_bn")
  ((:p+ PARM0_test  (* #.(swig-insert-id "tester_bn" () :type :type)) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTestConfusion_bn" "GetTestConfusion_bn")
  ((:p+ PARM0_test  (* #.(swig-insert-id "tester_bn" () :type :type)) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM2_predicted  #.(swig-insert-id "state_bn" () :type :type) )
   (:p+ PARM3_actual  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_test))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::let ((SWIG_arg2 PARM2_predicted))
  (cl::let ((SWIG_arg3 PARM3_actual))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetNumUndos_bn" "SetNetNumUndos_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_count_limit  :int )
   (:p+ PARM2_memory_limit  :double )
   (:p+ PARM3_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_count_limit))
  (cl::let ((SWIG_arg2 PARM2_memory_limit))
  (cl::let ((SWIG_arg3 PARM3_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UndoNetLastOper_bn" "UndoNetLastOper_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_to_when  :double ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_to_when))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RedoNetOper_bn" "RedoNetOper_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_to_when  :double ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_to_when))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeLabel_bn" "GetNodeLabel_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_label  (* :unsigned-short) )
   (:p+ PARM2_max_chars  :int )
   (:p+ PARM3_options  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_label))
  (cl::let ((SWIG_arg2 PARM2_max_chars))
  (cl::let ((SWIG_arg3 PARM3_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeStateLabel_bn" "GetNodeStateLabel_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) )
   (:p+ PARM2_label  (* :unsigned-short) )
   (:p+ PARM3_max_chars  :int )
   (:p+ PARM4_options  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::let ((SWIG_arg2 PARM2_label))
  (cl::let ((SWIG_arg3 PARM3_max_chars))
  (cl::let ((SWIG_arg4 PARM4_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CreateCustomReport_bn" "CreateCustomReport_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_sel_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM2_templat  (* :char) )
   (:p+ PARM3_options  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_sel_nodes))
  (cl::let ((SWIG_arg2 PARM2_templat))
  (cl::let ((SWIG_arg3 PARM3_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ControlConcurrency_ns" "ControlConcurrency_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_command  (* :char) )
   (:p+ PARM2_value  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_command))
  (cl::let ((SWIG_arg2 PARM2_value))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ControlNetCaching_bn" "ControlNetCaching_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_command  (* :char) )
   (:p+ PARM2_value  (* :char) )
   (:p+ PARM3_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_command))
  (cl::let ((SWIG_arg2 PARM2_value))
  (cl::let ((SWIG_arg3 PARM3_nodes))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExpandNet_bn" "ExpandNet_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_dimn  :int )
   (:p+ PARM2_result_time  :double )
   (:p+ PARM3_burn_time  :double )
   (:p+ PARM4_options  (* :char) ))
  (:returning ((* #.(swig-insert-id "net_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_dimn))
  (cl::let ((SWIG_arg2 PARM2_result_time))
  (cl::let ((SWIG_arg3 PARM3_burn_time))
  (cl::let ((SWIG_arg4 PARM4_options))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodeInputDelay_bn" "SetNodeInputDelay_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_link_index  :int )
   (:p+ PARM2_dimension  :int )
   (:p+ PARM3_delay  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_link_index))
  (cl::let ((SWIG_arg2 PARM2_dimension))
  (cl::let ((SWIG_arg3 PARM3_delay))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNodePersistance_bn" "SetNodePersistance_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_dimension  :int )
   (:p+ PARM2_persistance  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_dimension))
  (cl::let ((SWIG_arg2 PARM2_persistance))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNodeAtTime_bn" "GetNodeAtTime_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_name  (* :char) )
   (:p+ PARM2_time  (* :double) ))
  (:returning ((* #.(swig-insert-id "node_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_name))
  (cl::let ((SWIG_arg2 PARM2_time))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewRandomGenerator_ns" "NewRandomGenerator_ns")
  ((:p+ PARM0_seed  (* :char) )
   (:p+ PARM1_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM2_options  (* :char) ))
  (:returning ((* #.(swig-insert-id "randgen_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_seed))
  (cl::let ((SWIG_arg1 PARM1_env))
  (cl::let ((SWIG_arg2 PARM2_options))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteRandomGen_ns" "DeleteRandomGen_ns")
  ((:p+ PARM0_rand  (* #.(swig-insert-id "randgen_ns" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_rand))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetRandomGenState_ns" "GetRandomGenState_ns")
  ((:p+ PARM0_rand  (* #.(swig-insert-id "randgen_ns" () :type :type)) )
   (:p+ PARM1_options  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_rand))
  (cl::let ((SWIG_arg1 PARM1_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GenerateRandomNumbers_ns" "GenerateRandomNumbers_ns")
  ((:p+ PARM0_rand  (* #.(swig-insert-id "randgen_ns" () :type :type)) )
   (:p+ PARM1_results  (* :double) )
   (:p+ PARM2_num  :int )
   (:p+ PARM3_options  (* :char) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_rand))
  (cl::let ((SWIG_arg1 PARM1_results))
  (cl::let ((SWIG_arg2 PARM2_num))
  (cl::let ((SWIG_arg3 PARM3_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNetRandomGen_bn" "SetNetRandomGen_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_rand  (* #.(swig-insert-id "randgen_ns" () :type :type)) )
   (:p+ PARM2_is_private  #.(swig-insert-id "bool_ns" () :type :type) cl:integer))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_rand))
  (cl::let ((SWIG_arg2 PARM2_is_private))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterAction_bn" "EnterAction_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_state))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterActionValue_bn" "EnterActionValue_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_value  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_value))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnterActionRandomized_bn" "EnterActionRandomized_bn")
  ((:p+ PARM0_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM1_probs  (* #.(swig-insert-id "prob_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_node))
  (cl::let ((SWIG_arg1 PARM1_probs))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CleanupThreadEnding_ns" "CleanupThreadEnding_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewScripter_ns" "NewScripter_ns")
  ((:p+ PARM0_env  (* #.(swig-insert-id "environ_ns" () :type :type)) )
   (:p+ PARM1_file_name  (* :char) )
   (:p+ PARM2_language  (* :char) )
   (:p+ PARM3_options  (* :char) )
   (:p+ PARM4_script  (* :char) ))
  (:returning ((* #.(swig-insert-id "scripter_ns" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_env))
  (cl::let ((SWIG_arg1 PARM1_file_name))
  (cl::let ((SWIG_arg2 PARM2_language))
  (cl::let ((SWIG_arg3 PARM3_options))
  (cl::let ((SWIG_arg4 PARM4_script))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteScripter_ns" "DeleteScripter_ns")
  ((:p+ PARM0_scr  (* #.(swig-insert-id "scripter_ns" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_scr))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExecuteScript_ns" "ExecuteScript_ns")
  ((:p+ PARM0_scr  (* #.(swig-insert-id "scripter_ns" () :type :type)) )
   (:p+ PARM1_options  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_scr))
  (cl::let ((SWIG_arg1 PARM1_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StartScriptRecorder_ns" "StartScriptRecorder_ns")
  ((:p+ PARM0_scr  (* #.(swig-insert-id "scripter_ns" () :type :type)) )
   (:p+ PARM1_file_name  (* :char) )
   (:p+ PARM2_language  (* :char) )
   (:p+ PARM3_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_scr))
  (cl::let ((SWIG_arg1 PARM1_file_name))
  (cl::let ((SWIG_arg2 PARM2_language))
  (cl::let ((SWIG_arg3 PARM3_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StopScriptRecorder_ns" "StopScriptRecorder_ns")
  ((:p+ PARM0_scr  (* #.(swig-insert-id "scripter_ns" () :type :type)) )
   (:p+ PARM1_file_name  (* :char) )
   (:p+ PARM2_options  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_scr))
  (cl::let ((SWIG_arg1 PARM1_file_name))
  (cl::let ((SWIG_arg2 PARM2_options))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetScriptVar_ns" "GetScriptVar_ns")
  ((:p+ PARM0_scr  (* #.(swig-insert-id "scripter_ns" () :type :type)) )
   (:p+ PARM1_name  (* :char) )
   (:p+ PARM2_type  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_scr))
  (cl::let ((SWIG_arg1 PARM1_name))
  (cl::let ((SWIG_arg2 PARM2_type))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearScriptVars_ns" "ClearScriptVars_ns")
  ((:p+ PARM0_scr  (* #.(swig-insert-id "scripter_ns" () :type :type)) )
   (:p+ PARM1_options  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_scr))
  (cl::let ((SWIG_arg1 PARM1_options))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewSetting_bn" "NewSetting_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) )
   (:p+ PARM1_load  #.(swig-insert-id "bool_ns" () :type :type) cl:integer))
  (:returning ((* #.(swig-insert-id "setting_bn" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (cl::let ((SWIG_arg1 PARM1_load))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteSetting_bn" "DeleteSetting_bn")
  ((:p+ PARM0_cas  (* #.(swig-insert-id "setting_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cas))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetSettingState_bn" "SetSettingState_bn")
  ((:p+ PARM0_cas  (* #.(swig-insert-id "setting_bn" () :type :type)) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) )
   (:p+ PARM2_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cas))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::let ((SWIG_arg2 PARM2_state))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetSettingState_bn" "GetSettingState_bn")
  ((:p+ PARM0_cas  (* #.(swig-insert-id "setting_bn" () :type :type)) )
   (:p+ PARM1_node  (* #.(swig-insert-id "node_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "state_bn" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cas))
  (cl::let ((SWIG_arg1 PARM1_node))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ZeroSetting_bn" "ZeroSetting_bn")
  ((:p+ PARM0_cas  (* #.(swig-insert-id "setting_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cas))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NextSetting_bn" "NextSetting_bn")
  ((:p+ PARM0_cas  (* #.(swig-insert-id "setting_bn" () :type :type)) ))
  (:returning (#.(swig-insert-id "bool_ns" () :type :type) cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_cas))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MostProbableSetting_bn" "MostProbableSetting_bn")
  ((:p+ PARM0_net  (* #.(swig-insert-id "net_bn" () :type :type)) )
   (:p+ PARM1_cas  (* #.(swig-insert-id "setting_bn" () :type :type)) )
   (:p+ PARM2_nth  :int ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_net))
  (cl::let ((SWIG_arg1 PARM1_cas))
  (cl::let ((SWIG_arg2 PARM2_nth))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NthProb_bn" "NthProb_bn")
  ((:p+ PARM0_probs  (* #.(swig-insert-id "prob_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_probs))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NthLevel_bn" "NthLevel_bn")
  ((:p+ PARM0_levels  (* #.(swig-insert-id "level_bn" () :type :type)) )
   (:p+ PARM1_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_levels))
  (cl::let ((SWIG_arg1 PARM1_state))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetChars_ns" "GetChars_ns")
  ((:p+ PARM0_str  (* :char) )
   (:p+ PARM1_index  :int )
   (:p+ PARM2_dest  (* :unsigned-short) )
   (:p+ PARM3_num  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_str))
  (cl::let ((SWIG_arg1 PARM1_index))
  (cl::let ((SWIG_arg2 PARM2_dest))
  (cl::let ((SWIG_arg3 PARM3_num))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NthChar_ns" "NthChar_ns")
  ((:p+ PARM0_str  (* :char) )
   (:p+ PARM1_index  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_str))
  (cl::let ((SWIG_arg1 PARM1_index))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetNthState_bn" "SetNthState_bn")
  ((:p+ PARM0_states  (* #.(swig-insert-id "state_bn" () :type :type)) )
   (:p+ PARM1_index  :int )
   (:p+ PARM2_state  #.(swig-insert-id "state_bn" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_states))
  (cl::let ((SWIG_arg1 PARM1_index))
  (cl::let ((SWIG_arg2 PARM2_state))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OptimizeDecisions_bn" "OptimizeDecisions_bn")
  ((:p+ PARM0_nodes  (* #.(swig-insert-id "nodelist_bn" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_nodes))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))



(cl::in-package :swig)

(macrolet ((swig-do-export ()
                 `(dolist (s ',*swig-export-list*)
                    (apply #'export s))))
   (swig-do-export))

(setq *swig-export-list* nil)

